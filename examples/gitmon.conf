# Пример конфигурационного файла для проекта GitMon.
# Формат файла - стандартный ini-файл
# Параметры в раделе [DEFAULT] общие для всех других разделов, но могут быть переопределены непосредственно в разделе.


[DEFAULT]
# github_base_url - базовый url к github API. Без необходимости не менять
github_base_url: https://api.github.com/repos

# github_token - personal access token для программного доступа к вашим проектам на github.com
# Необходим, если планируется производить действия с вашими файлами на github.
# Token необходимо заранее получить на странице https://github.com/settings/tokens и прописать в этом файле в виде: 
# github_token: 1234567890abcdef1234567890

# file_max_size - максимальный размер файла, в который будут записываться логи commits и releases
# Размер измеряется в строках. При достижении максимального размера старые строки будут удаляться.
file_max_size: 10000

# update_interval - интервал между опросами commits и releases.
# Выражается в минутах
# При update_interval = 0 - происходит один опрос и выход из программы
update_interval = 0

# log_detail - детализация вывода логов commits и releases
# small, medium, full
log_detail: full

# app_logs_type - куда выводить логи программы GitMon (не путать с логами commits и releases)
# none, console, file
app_logs_type: file

# app_logs_file - имя файла для логов программы GitMon
app_logs_file: gitmon.log

# line_prefix - при выводе к каждой строке из commits или releases будет добавлен указанный символ и пробел.
# По-умолчанию ничего не добавляется.
# line_prefix: #



###############################################################################
# Организация разделов (примеры ниже):
#
# [Название репозитария в виде Имя_Владельца/Проект]
# commits: <N> - получить информацию о N последних коммитов
# releases: <M> - получить информацию о m последних коммитов
# only_new: true/false - если true, то выполнять действия (actions) только если есть новые commits или releases
# log_start: <TEXT> - произвольный текст, который можно вывести на консоль или файл
# log_text: <TEXT> - произвольный текст, который можно вывести на консоль или файл
# log_end: <TEXT> - произвольный текст, который можно вывести на консоль или файл
# line_prefix: <CHAR> - см. описание в разделе [DEFAULT]
#
# actions: <action1, action2, ...> - список действий над логами commits и releases, перечисленных через запятую.
#
# Перечень возможных действий:
#
# 	local.console.print.log_start = , - вывести содержимое переменной "log_start" на консоль
#   local.console.print.log_text = , - вывести содержимое переменной "log_text" на консоль
#   local.console.print.commits = , - вывести содержимое последних N логов commits на консоль
#   local.console.print.releases = , - вывести содержимое последних M логов releases на консоль
#   local.console.print.log_end = , - вывести содержимое переменной "log_end" на консоль
#
#   Записать, вставить, добавить или удалить из указанного файла <file>: 
#	local.file.<write|insert|append|delete>.<log_start|log_text|commits|releases|log_end> = <file>
#		write - перезаписывает файл
#		insert - вставляет в начало файла
#		append - добавляет в конец файла
#		delete - удаляет из файла указанные данные	
#
#		Пример: добавить в конец файла changelog.txt информацию о релизах (если файл не существует, то он будет создан):
#		local.file.append.releases = changelog.txt
#
#	Записать, вставить, добавить или удалить из файла <file> вашего проекта <project> на github: 
#	github.<project>.<write|insert|append|delete>.<log_start|log_text|commits|releases|log_end> = <file>
#
#		Пример: вставить в начало файла readme.txt информацию о commits в вашем проекте CoolApp:
#		github.CoolApp.insert.commits = readme.txt
#
#	Выполнить произвольный скрипт:   
#	local.shell = <shell command or script>
#	
#		Пример: вставить в файл текущую дату и время
#		local.shell = date >> info.txt
#   
#	Запуск компиляции вашего образа на hub.docker.com:
#	dockerhub.buildimage.<tag> = <url to trigger>
#
#  	Необходимо заранее настроить automated build и указать путь к его триггеру
#	Как настроить automated build: https://docs.docker.com/docker-hub/builds/
#
#		Пример:
#   	dockerhub.buildimage.latest = https://registry.hub.docker.com/u/vasya/test/trigger/111111-2222-3333-4444-567890/
#
###############################################################################



# Пример 1: вывод последних 10 commits по проекту netty/netty на консоль
[netty/netty]
log_detail: medium
commits: 10
only_new: false
log_start: <--- Start of [netty/netty] changelog --->
log_text: Latest %(commits)s commits:
log_end: <--- End of [netty/netty] changelog --->

actions: local.console.print.log_start = ,
         local.console.print.log_text = ,
         local.console.print.commits = ,
         local.console.print.log_end = 

		 
		 
# Пример 2: вывод последних 20 commits сразу по двум проектам elastic/apm-agent-nodejs и elastic/kibana в локальный файл changelogs.txt
[elastic/apm-agent-nodejs, elastic/kibana]
log_detail: medium
commits: 20
only_new: false
log_text: Latest %(commits)s commits for elastic/apm-agent-nodejs and elastic/kibana:

actions: local.file.write.log_text = changelogs.txt,
         local.file.append.commits = changelogs.txt

		 
		 
# Пример 3: ведение changelog по проекту Netflix/Hystrix в своем github-проекте my_spy
[Netflix/Hystrix]
log_detail: medium
commits: 30
only_new: true
github_token: 1234567890abcdef1234567890

actions: github.my_spy.append.commits = Hystrix.log



		 
# Пример 4: запуск компиляции вашего образа на hub.docker.com при появлении нового релиза проекта PurpleI2P/i2pd
[PurpleI2P/i2pd]
log_detail: medium
releases: 1
only_new: true

actions: dockerhub.buildimage.latest = https://registry.hub.docker.com/u/USER/IMAGE/trigger/1234-5678-9123-4567-7889/

